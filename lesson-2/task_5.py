# 5. Создать вручную список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, ...]
price = [57.08, 46.51, 97, 300.11, 800, 15, 6.52, 318.88, 99.82, 569.33, 18, 985]

# A. Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде
# <r> руб <kk> коп (например «5 руб 04 коп»). Подумать, как из цены получить рубли и копейки,
# как добавить нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп
# или 00 коп).

# Резервируем место под список цен
price_str = [None] * len(price)
for idx in range(0, len(price)):
    # Приводим каждую цену к float, чтобы в дальнейшем разделить цену на целую и дробную часть по разделителю  ".",
    ruble, penny = str(float(price[idx])).split('.')
    # Собираем строку цены в требуемом виде
    price_str[idx] = f'{ruble} руб {penny.zfill(2)} коп'

# Выводим отформатированный цены на экран одной сплошной строкой через запятую
print(','.join(price_str))

# B. Вывести цены, отсортированные по возрастанию, новый список не создавать (доказать, что
# объект списка после сортировки остался тот же).

# Сохраняем id объекта перед сортировкой
obj_id_before_sort = id(price)
# Производим сортировку по возрастанию внутри объекта
price.sort()
# Выводим цены в требуемом виде
print(price)
# Доказываем что объект не изменился, сравнивая его id до сортировки и после
print(f'Объект тот же что и до сортировки: {obj_id_before_sort==id(price)}')

# C. Создать новый список, содержащий те же цены, но отсортированные по убыванию.
new_price_list = sorted(price, reverse=True)

# D. Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по
# возрастанию, написав минимум кода?
print(sorted(price)[len(price)-5:])
