# 3. Есть два файла: в одном хранятся ФИО пользователей сайта, а в другом — данные об их хобби.
# Известно, что при хранении данных используется принцип: одна строка — один пользователь,
# разделитель между значениями — запятая.
# Написать код, загружающий данные из обоих файлов и формирующий из них словарь:
# ключи — ФИО, значения — данные о хобби.
# Сохранить словарь в файл. Проверить сохранённые данные.
# Если в файле, хранящем данные о хобби, меньше записей, чем в файле с ФИО, задаём в словаре значение None.
# Если наоборот — выходим из скрипта с кодом «1».
# При решении задачи считать, что объём данных в файлах во много раз меньше объема ОЗУ.
# Фрагмент файла с данными о пользователях (users.csv):
# Иванов,Иван,Иванович
# Петров,Петр,Петрович
# Фрагмент файла с данными о хобби (hobby.csv):
# скалолазание,охота
# горные лыжи
def merge_lists_into_dict(master, slave):
    """
    Смерживает два списка в словарь, если в головном больше элементов, чем в дочернем, недостающие заполняет None
    :param master: основной список, будет использоваться для ключей словаря
    :param slave: дочерний списко, будет использоваться для значений словаря
    :return: словарь
    """
    if len(master) < len(slave):
        return -1
    else:
        return {master[i].replace("\n", ""): slave[i].replace("\n", "") if len(slave) > i else None
                for i in range(len(master))}


with open('users.csv', 'r', encoding='utf-8') as f:
    user_list = f.readlines()

with open('hobby.csv', 'r', encoding='utf-8') as f:
    hobby_list = f.readlines()

with open('user_hobby.txt', 'w', encoding='utf-8') as f:
    f.write(str(merge_lists_into_dict(user_list, hobby_list)))
